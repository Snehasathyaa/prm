Program 1: C program to find the sum of 'n' numbers.
Roll no  : 54
Name     : Sneha k p
code	 : 	
		#include<stdio.h>
		int main()
		{
 			int ary[10];
			int size,i,sum=0;
			printf("enter array size \n");
			scanf(" %d",&size);
			printf("enter array elements \n");
			for(int i=0;i<size;i++)
			{
				scanf("%d",&ary[i]);
			}
 			for(i=0;i<size;i++)
			{
				sum=sum+ary[i];
			}
			printf("sum of array=%d\n",sum);
			return 0;
		}



Program 2: C program to merge two sorted arrays.
Roll no  : 54
Name     : Sneha k p
code	 : 
		#include<stdio.h>
		int a[10], b[10], d[20];
		int m, n;
		int i, j;

		void sort(int c[], int size) 
		{
			int temp;
			for(i = 0; i < size - 1; i++) 
			{
				for(j = i + 1; j < size; j++) 
				{
					if(c[i] > c[j]) 
					{
						temp = c[i];
						c[i] = c[j];
						c[j] = temp;
	   				}
				}
			}
		}
 
		void merge(int a[],int b[],int size1,int size2)
		{
			for(i = 0; i < size1; i++) 
			{
				d[i] = a[i];
			}
			for(i = 0; i < size2; i++) 
			{
				d[m + i] = b[i];
			}
		}
		void display(int c[], int size) 
		{
			for(i = 0; i < size; i++) 
			{
				printf("%d\t", c[i]);
			}
		}

		int main() 
		{
			printf("Enter the number of elements of array 1:\n");
			scanf("%d", &m);
			printf("Enter the elements of array 1:\n");

			for(i = 0; i < m; i++) 
			{
				scanf("%d", &a[i]);
			}

			printf("Enter the number of elements of array 2:\n");
			scanf("%d", &n);
			printf("Enter the elements of array 2:\n");

			for(i = 0; i < n; i++) 
			{
				scanf("%d", &b[i]);
			}

			printf("the entered unsorted array1\t");
			display(a,m);

			printf("\nthe entered unsorted array2\t");
			display(b,n);

			sort(a, m);
			sort(b, n);
	 		printf("\nSorted array 1:\n");
			display(a, m);

			printf("\nSorted array 2:\n");
			display(b, n);

			int merged_size = m + n;
			printf("\nthe merged array");
			merge(a,b,m,n);
			display(d, merged_size);
			sort(d, merged_size);
			printf("\nMerged and sorted array:\n");
			display(d, merged_size);

			return 0;
		}


Program 3: C program to create a STACK using array data structure and implement the operations 		   PUSH, POP and TRAVESE.
Roll no  : 54
Name     : Sneha k p
code	 : 
		#include<stdio.h>
		#include<stdlib.h>
		#define max 5
		int stack[max];
		int top=-1;
		void push(int element)
		{
			if(top==max-1)
			{                           
				printf("stack overflow");
			}
			else{
				top++;
				stack[top]=element;
				printf("pushed %d into stack \n",element);
			}
		}
		int pop()
		{
			if(top==-1)
			{
				printf("stack underflow");
				return -1;
			}
			else{
				int popped_element=stack[top];
				top--;
				printf("popped %d into stack \n",popped_element);
			}
	
		}
		void traversal()
		{
			if(top==-1)
			{
				printf("stack is empty");
		
			}
		
			else{
				printf(" stack element are: \n  ");
				for(int i=top;i>=0;i--)
				{
					printf(" %d  ",stack[i]);
				}

			}
		}

		int main()
		{
			int choice, element;
			do{
				printf(" 1.Push \n 2.Pop \n 3.Traveral \n 4. Exit \n");
				scanf("%d",&choice);
				switch(choice)
				{
					case 1:
					    printf("enter element to push: \n");
					    scanf("%d",&element);
					    push(element);
					    break;
					case 2:
					    pop();
					    break;
					case 3:
					    traversal();
					    break;
					case 4:
					    break;
					default:
					    printf("invalid choice \n");
					    break;
				}
			}while(choice!=4);
			return 0;
		}


Program 4: C program to create a QUEUE using array data structure and implement the operations 		   ENQUEUE, DEQUEUE and TRAVERSE.
Roll no  : 54
Name     : Sneha k p
code	 : 
		#include <stdio.h>
		#include <stdlib.h>
		#define MAX 5

		int Queue[MAX];
		int front = -1;
		int rear = -1;

		void enqueue(int value)
		{
    			if(rear == MAX - 1)
    			{
        			printf("Queue is full! Cannot insert\n");
    			}
    			else {
				if(front == -1)
				{
				    front = 0;
				}
				
				rear = rear + 1;
				Queue[rear] = value;
				printf("Inserted %d into queue\n", value);
    			}
		}

		void dequeue()
		{
			if(front == -1 || front > rear)
			{
				printf("Queue is empty\n");
			}
			else {
				
				int dequeue_element = Queue[front];
				front = front + 1;
			       	printf("Deleted %d from queue\n", dequeue_element);
			       
				if(front > rear) {
					front = rear = -1;
				}
			    }
		}

		void traversal()
		{
			if(front == -1 || front > rear)
			{
				printf("Queue is empty\n");
			}
			else {
				for(int i = front; i <= rear; i++)
				{
					printf("Queue element: %d\n", Queue[i]);
				}
			}
		}

		int main()
		{
			int choice, value;
			do {
				printf("\n1. Enqueue\n2. Dequeue\n3. Traversal\n4. Exit\n");
				scanf("%d", &choice);
				switch(choice)
				{
					case 1:
					    printf("Enter element to insert: \n");
					    scanf("%d", &value);
					    enqueue(value);
					    break;
				    	case 2:
					    dequeue();
					    break;
				     	case 3:
					    traversal();
					    break;
				    	case 4:
					    exit(0);
					    break;
				        default:
					    printf("Invalid choice\n");
					    break;
				}
			    } while(choice != 4);
			    
			    return 0;
		}		
